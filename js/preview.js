(async()=>{const sets=[await(await fetch(`https://petershaggynoble.github.io/MDI-Sandbox/json/icons.json`)).json(),
await(await fetch(`https://petershaggynoble.github.io/MDI-Sandbox/json/light.json`)).json(),
await(await fetch(`https://petershaggynoble.github.io/MDI-Sandbox/json/stock.json`)).json(),
await(await fetch(`https://petershaggynoble.github.io/MDI-Sandbox/json/extended.json`)).json(),
await(await fetch(`https://petershaggynoble.github.io/MDI-Sandbox/json/other.json`)).json()],
inputs={data:document.getElementById(`data`),
overlay:document.getElementById(`overlay`),
name:document.getElementById(`name`),
action:document.getElementById(`action`),
type:document.getElementById(`type`)},
text={name:document.querySelector(`text`),
type:document.querySelector(`text+text`),
disclaimer:document.querySelector(`text:last-of-type`),
},
svg=document.querySelector(`figure>svg`),
shadow=document.querySelector(`feDropShadow`),
grid=document.querySelector(`#grid>path`),
path=document.getElementById(`path`),
ghost=document.getElementById(`ghost`),
caption=document.querySelector(`g>rect:last-of-type`),
icon=document.querySelector(`figure>svg>path:last-of-type`),
canvas=document.querySelector(`canvas`),
context=canvas.getContext(`2d`),
width=canvas.width,
height=canvas.height,
button=document.querySelector(`button`),
a=document.createElement(`a`),
xml=new XMLSerializer,
image=new Image,
transforms=[`translate(11,
10)`,
`translate(11,
10)`,
`scale(.046875) scale(1,
-1) translate(234.66667,
-725.33333)`,
`scale(.046875) scale(1,
-1) translate(234.66667,
-725.33333)`,
`scale(.05) scale(1,
-1) translate(220,
-680)`],
draw=()=>image.src=URL.createObjectURL(new Blob([xml.serializeToString(svg)],
{type:`image/svg+xml;charset=utf-8`})),
generate=event=>{clearTimeout(timer);timer=setTimeout(()=>{target=event.target;value=target.value;delay=0;ind=-1;switch(target){case inputs.data:path.setAttribute(`d`,
value);if(value){size=Math.max(...value.match(/(\d|\.)+/g).map(x=>parseFloat(x)));transform=transforms[0];inputs.name.value=``;while(!inputs.name.value&&sets[++ind])for(key in (set=sets[ind]))if(set.hasOwnProperty(key))if(set[key].data===value){inputs.name.value=key;transform=transforms[ind];break;}path.setAttribute(`transform`,
transform);inputs.name.dispatchEvent(new Event(`input`));}break;case inputs.overlay:ghost.setAttribute(`fill-opacity`,
value?`.4375`:`0`);delay=value?0:200;if(value){transform=transforms[0];while(sets[++ind])for(key in (set=sets[ind]))if(set.hasOwnProperty(key))if(set[key].data===value){transform=transforms[ind];break;}ghost.setAttribute(`transform`,
transform);}break;case inputs.name:text.name.textContent=value.trim().toLowerCase().replace(/ |_/g,
`-`);break;case inputs.action:value&&icon.setAttribute(`d`,
value);icon.setAttribute(`fill-opacity`,
value?1:0);delay=200;break;case inputs.type:if(value){text.type.textContent=value;text.disclaimer.textContent=target.options[target.selectedIndex].dataset.text;}shadow.setAttribute(`flood-color`,
`#${color=target.options[target.selectedIndex].dataset.color}`);grid.setAttribute(`stroke`,
`#`+color);path.setAttribute(`fill`,
`#`+color);caption.setAttribute(`fill`,
`#`+color);caption.setAttribute(`stroke`,
`#`+color);icon.setAttribute(`fill`,
`#`+color);for(key in text)if(text.hasOwnProperty(key))text[key].setAttribute(`fill`,
`#`+color);delay=value?0:200;text.type.setAttribute(`fill-opacity`,
value?1:0);text.disclaimer.setAttribute(`fill-opacity`,
value?1:0);}timer=setTimeout(()=>{target===inputs.overlay&&ghost.setAttribute(`d`,
value);draw();},
delay);},
50);};let color,
delay,
ind,
key,
set,
size,
target,
timer,
transform,
value;image.addEventListener(`load`,
()=>{context.clearRect(0,
0,
width,
height);context.drawImage(image,
0,
0);URL.revokeObjectURL(image.src);},
0);button.addEventListener(`click`,
()=>{canvas.toBlob(blob=>{a.href=URL.createObjectURL(blob);a.download=text.name.firstChild.nodeValue+`-preview.png`;document.body.append(a);a.click();a.remove();URL.revokeObjectURL(a.href);});},
0);document.addEventListener(`input`,
generate,
1);draw();})();
